 Docker :- Docker is an open platform for developing,shipping and running the applications.Docker enable you to separe your applications from your infrastructure so we can delivery software quickly.
------
--->with docker we can manage your infrastructure in the same ways we can manage your applications.
--->By taking advantages of docker methodologies,for shipping,testing and deploying code quickly,you can significantly reduce the delay time between writing the code and running it in production.


What can i use docker for...?

--->Fast and consistent delivery of your software.
--->Docker streamlines the development lifecycle by allowing the developer to work in standardized environment using local containers which provides your applications and services.
--->Docker is great for continuous integration and continuous delivery (CI/CD) workflows. 

Eg:-
---

---> Your developer write code locally and share thier code with peer developers by using docker containers.
---> They use docker to push thier application into test environment for execute automated and manual tests.
---> If the developer finds a bug,it fixes in the development enviroment and again redelopy into test environment for validation.
---> When the testing is complete, getting the fix to the customer is simple as pushing the updated images to the production.


Running more workloads on the same software:-
---------------------------------------------

---> Docker is lightweight and fast. it provides a viable and cost-effective alternative to hypervisor-based virtual machines, so we can use more of your compute capacity to achieve your business goals.
---> Docker is great for high density environments and for small and medium deployments where we need to do more with fewer resources.


Docker Architecture
-------------------

---> Docker uses the client server architecture. (Client ---> Command prompt), (Sever ---> Docker Daemon).
---> Docker client talks to the docker daemon which does the heavy lifting like building, shipping, and distributing your docker containers.
---> The docker client and docker daemon can run on the same system or we can connect docker client with remote docker daemon.

Docker Daemon:-
--------------

---> (Dockerd) docker daemon listens for docker API requests and manges the docker objects such as, Images, Containers, Networks and Volumes.
---> A daemon can also communicate with other daemons to manage the docker services.

Docker Client:-
--------------

---> (Docker) Docker Client is a primary way that many docker users can intract with docker.
---> When we use commands, The docker client send these command to dockerd which carries them out.

Docker registry:-
-----------------

---> A docker registry stores the docker images. Docker hub is a public registry that anyone can use, Docker is configured to look for docker images on docker hub by default.You can run your own private registry.

---> When you use docker pull or docker run commands, The requried images are pulled from your configured registry. When you use docker push command, Your image is pushed to configured registry.


Docker Images:-
--------------

---> Docker image is a read-only template with instructions to create a docker container.(To build your own image you create a dockerfile.)

---> The images are stored in the registry (Docker Hub).

---> A single image can be used to create multiple containers.

---> Docker Images ---> This command is used to list out all the images on our system.

---> Docker pull <image Name> ---> This command is used to pull the image from registry (Docker Hub).

---> Docker pull <Image Name>:Tag ---> This  his command is used to pull the image from registry with specified Tag (Docker Hub).

Eg:- Docker pull ubuntu:18.2.1

---> Docker images -q ---> This command is used to list out only image id's. (-q Means quiet Tag. It only shows numeric id's.)

---> Docker images -f ---> This is a filter command. (-f menas filter Tag. Filter output based on condition provided.)
Eg:- Docker Images -f "dangling=false/true"

---> "Dangling Images" ---> Dangling images are the images which are associated with the container or a running container.

---> Docker inspect imageid/image name ---> This command is used to gives all the details of image like id,tags,host name,domain name,layers Etc.

*** Image typically contains a union of layered filesystems stacked on top of each other.

---> Docker rmi <imageid/name> ---> This command is used to delete the specific image.

---> Docker rmi -f <imageid/name> ---> To delete the image forcely.


Docker Container:-
------------------

---> A container is an runnable instance of an image. You can create, start, stop, move, delete a container using the docker API or CLI.
---> From one image we can create multiple containers.

---> Docker Run ImageName ---> This command does, if you don't have that specified image locally on your dockerd than it pulls from registry and creates a container. But the created container wont run.
---> Docker run -it ImageName ---> This command does, if you don't have that specified image locally on your dockerd than it pulls from registry and creates a container. And the created container will run. (-it means Interactive Terminal).
---> If we use -it than always new container will be created.

---> Docker run -it <imageid> ---> This command is used to create a container and enters into it.
---> Docker ps ---> This command list out the all running containers.
---> Docker ps -a ---> This command list out the containers.
---> Docker Start <Containerid/Name> ---> This command starts the stopped container.
Eg:- Docker start cb797348bfbc
---> Docker Stop <Containerid/Name> ---> This command stops the running container.
Eg:- Docker stop cb797348bfbc
---> Docker Pause <ContainerId> ---> It pause the running container. It won't take any inputs from client.
---> Docker unpause <ContainerId> ---> It unpauses the paused container. Then it accepts the inputs from client.

**How to enter into a exited container?
---> There are two ways.
1. Docker Attach <Containerid> ---> After exiting the container we have start that container first. To enter into a container.
Eg:- Docker Attach cb797348bfbc

2. In second way :- Exiting means stopping the container so we have to start that container first. And then use this command.
Syntax:- docker exec -it <ContainerID> /bin/bash
Eg :- Docker exec -it cb797348bfbc /bin/bash

---> Docker Kill <ContainerId> ---> This command is used to kill the container. Kill action is nothing but exiting from container.
Eg:- Docker kill cb797348bfbc
---> Docker rm <ContainerId> ---> This command is used to delete the container.
Eg:- Docker rm cb797348bfbc
** Running container won't be deleted. If you want to delete the running container we have to stop that container are we delete forcely.

Syntax:- Docker rm -f <ContainerId>
Eg:- Docker rm -f cb797348bfbc












